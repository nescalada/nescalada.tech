---
import ThemeToggle from "./ThemeToggle.astro";
import Briefcase from "@/components/icons/Briefcase.astro";
import ProfileCheck from "@/components/icons/ProfileCheck.astro";
import Backpack from "@/components/icons/Backpack.astro";

const navItems = [
  {
    icon: Briefcase,
    title: "Portfolio",
    label: "portfolio",
    url: "/#portfolio",
    style: "size-5",
  },
  {
    icon: ProfileCheck,
    title: "About",
    label: "about",
    url: "/#about",
    style: "size-5",
  },
  {
    icon: Backpack,
    title: "Background",
    label: "background",
    url: "/#background",
    style: "size-5",
  },
];
---

<header class="fixed top-0 z-10 w-full">
  <nav
    class="p-2 justify-between flex px-3 text-sm font-medium text-gray-600 dark:text-white/90 items-center"
  >
    <a
      href="/#home"
      class="absolute left-2 p-2 w-14 sm:w-auto hover:text-blue-500"
      ><strong>Nehuen Escalada</strong></a
    >
    <div class="inline-flex m-auto">
      {
        navItems.map((link) => (
          <a
            class="relative p-2 appearance-none border-none hover:scale-125 block px-2 py-2 transition hover:text-blue-500"
            aria-label={link.label}
            href={link.url}
            title={link.title}
          >
            <link.icon class={`${link.style || ""}`} />
          </a>
        ))
      }
    </div>
    <ThemeToggle />
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-blue-500");
            } else {
              item.classList.remove("text-blue-500");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 150px;
  }

  nav {
    @apply dark:bg-gray-800/90 bg-white/50;
  }

  @keyframes nav-shadown {
    0% {
      @apply dark:bg-gray-800/0 bg-white/0;
    }
    to {
      @apply shadow-lg ring-1 backdrop-blur-md ring-white/10;
    }
  }
</style>
